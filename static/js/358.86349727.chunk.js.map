{"version":3,"file":"static/js/358.86349727.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/Contacts/Contacts.module.css?5e71","redux/contacts/selectors.js","components/Contacts/Contacts.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","../node_modules/nanoid/index.browser.js","webpack://goit-react-hw-08-phonebook/./src/components/Phonebook/Phonebook.module.css?3a02","components/Phonebook/Phonebook.jsx","pages/MainPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contacts_list\":\"Contacts_contacts_list__A4xOV\",\"contacts_item\":\"Contacts_contacts_item__-qLs1\",\"contacts_btn\":\"Contacts_contacts_btn__NyTAN\",\"contacts_info\":\"Contacts_contacts_info__YiIhR\"};","export const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n","import PropTypes from 'prop-types';\nimport style from './Contacts.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const Contacts = () => {\n  const dispatch = useDispatch();\n  const filterTerm = useSelector(selectFilter);\n  const contacts = useSelector(selectContacts);\n  const handleDeleteContact = e => {\n    dispatch(deleteContact(e.target.value));\n  };\n  return (\n    <ul className={style.contacts_list}>\n      {contacts\n        .filter(i => i.name.includes(filterTerm))\n        .map(item => {\n          const { name, id, number } = item;\n          return (\n            <li key={id} className={style.contacts_item}>\n              <p className={style.contacts_info}>\n                {name} : {number}\n              </p>\n              <button\n                className={style.contacts_btn}\n                type=\"button\"\n                onClick={handleDeleteContact}\n                value={id}\n              >\n                Delete\n              </button>\n            </li>\n          );\n        })}\n    </ul>\n  );\n};\n\nContacts.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    })\n  ),\n  filterTerm: PropTypes.string,\n  onClick: PropTypes.func,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filter_section\":\"Filter_filter_section__3D9JZ\",\"filter_input\":\"Filter_filter_input__knHkk\"};","import { useDispatch } from 'react-redux';\nimport style from './Filter.module.css';\nimport { setFilterValue } from 'redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filterValue = e => {\n    dispatch(setFilterValue(e.target.value));\n  };\n  return (\n    <section className={style.filter_section}>\n      <h2>Find contact by name</h2>\n      <input\n        className={style.filter_input}\n        type=\"text\"\n        name=\"filter\"\n        onChange={filterValue}\n        placeholder=\"Enter name\"\n      />\n    </section>\n  );\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Phonebook_form__Uq0Ll\",\"label\":\"Phonebook_label__RdHLX\",\"input\":\"Phonebook_input__W21if\",\"btn\":\"Phonebook_btn__IHltP\"};","import { nanoid } from 'nanoid';\nimport style from './Phonebook.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n\nexport const Phonebook = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const handleSubmitForm = e => {\n    e.preventDefault();\n    const contactName = e.target.elements.name.value;\n    const contactNumber = e.target.elements.number.value;\n    const newContact = {\n      name: contactName,\n      number: contactNumber,\n    };\n    dispatch(addContact(newContact));\n\n    if (contacts.some(i => i.name === contactName)) {\n      alert(`You alraeady have a ${contactName} in contacts`);\n      return;\n    }\n    e.target.reset();\n  };\n  return (\n    <div>\n      <form onSubmit={handleSubmitForm} className={style.form}>\n        <label htmlFor={nanoid()} className={style.label}>\n          Name\n          <input\n            className={style.input}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            placeholder=\"Roboute Guliman\"\n            required\n          />\n        </label>\n        <label htmlFor={nanoid()} className={style.label}>\n          Number\n          <input\n            className={style.input}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n        <button className={style.btn} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n};\n","import { Contacts } from 'components/Contacts/Contacts';\nimport { Filter } from 'components/Filter/Filter';\nimport Loader from 'components/Loader/Loader';\nimport { Phonebook } from 'components/Phonebook/Phonebook';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectError, selectIsLoading } from 'redux/contacts/selectors';\n\nexport default function MainBook() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Phonebook />\n      <Filter />\n      {isLoading && !error && <Loader />}\n      <Contacts />\n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectFilter","filter","selectIsLoading","isLoading","selectError","error","Contacts","dispatch","useDispatch","filterTerm","useSelector","handleDeleteContact","e","deleteContact","target","value","className","style","i","name","includes","map","item","id","number","type","onClick","Filter","onChange","setFilterValue","placeholder","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","Phonebook","onSubmit","preventDefault","contactName","elements","contactNumber","newContact","addContact","some","alert","reset","htmlFor","pattern","title","required","MainBook","useEffect","fetchContacts","Loader"],"sourceRoot":""}